<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/03/29/hello-world/"/>
      <url>/2019/03/29/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ZigZag Conversion</title>
      <link href="/2017/01/03/leetecode/ZigZag-Conversion/"/>
      <url>/2017/01/03/leetecode/ZigZag-Conversion/</url>
      
        <content type="html"><![CDATA[<h1 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h1><p>给定一个数组和这个数组的行数，这个数组是按照纵向的Z的形状排列的。<br>例如字符串”PAYPALISHIRING”,行数为3。排列形状入下图所示：<br><img src="/images/leetecode/ZigZag-Conversion.png" alt="ZigZag Conversion Picture 1"><br>输出需要按行从左向右输出,结果为”PAHNPLSIIGYIR”。<br><a id="more"></a></p><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><p><img src="/images/leetecode/ZigZag-Conversion-2.png" alt="ZigZag Conversion Picture 2"><br>如上图所示，同一行两列的两个字符a和b在Z字形字符串的间隔为X + Y + Z这3个区段所包含的字符个数。<br>其中Z区段包含的字符个数为行数(n + 1)减去2，X和Y区段包含的字符数为行数(n + 1)，<br>所以总的间隔数为2 <em> (n + 1) - 2。<br>同理可以分析出c和d的间隔数一样为2 </em> (n + 1) - 2。<br>若如上图中，求a和c字符的字符间距为a和b的字符间距减去M和N包含的区段。<br>所以a和c的字符间距为2 <em> (n + 1) - 2 - 2 </em> i。<br>综上所述，在输出第0行和最后一行每个字符时，只需要在上一列的基础上加上列间距既可以在Z字形字符串<br>找到对应的字符。对于中间行，要分2种情况去处理，对于当前输出的是在Z字形的列上面的字符时，只需在<br>上一列的基础上加上列间距就可以找到。对于当前要输出的是在Z字形夹在中间的字符时,需要下一列同一行的位置<br>减去2 * 当前所处的行号。</p><h1 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h1><h2 id="C-实现"><a href="#C-实现" class="headerlink" title="C++实现"></a>C++实现</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">convert</span><span class="params">(<span class="built_in">string</span> s, <span class="keyword">int</span> numRows)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(numRows == <span class="number">1</span>) <span class="keyword">return</span> s;</span><br><span class="line">        <span class="keyword">int</span> gap = <span class="number">2</span> * numRows - <span class="number">2</span>;</span><br><span class="line">        <span class="built_in">string</span> result;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numRows; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = i; j &lt; s.size(); j += gap) &#123;</span><br><span class="line">                result += s[j];</span><br><span class="line">                <span class="keyword">if</span>(i != <span class="number">0</span> &amp;&amp; i != numRows - <span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="keyword">int</span> index = j + gap - <span class="number">2</span> * i;</span><br><span class="line">                    <span class="keyword">if</span>(index &lt; s.size()) result += s[index];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="Go实现"><a href="#Go实现" class="headerlink" title="Go实现"></a>Go实现</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">convert</span><span class="params">(s <span class="keyword">string</span>, numRows <span class="keyword">int</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line">     <span class="keyword">if</span> numRows == <span class="number">1</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> s</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> result <span class="keyword">string</span></span><br><span class="line">    gap := <span class="number">2</span>*numRows - <span class="number">2</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; numRows; i++ &#123;</span><br><span class="line">        <span class="keyword">for</span> j := i; j &lt; <span class="built_in">len</span>(s); j += gap &#123;</span><br><span class="line">            result += <span class="keyword">string</span>(s[j])</span><br><span class="line">            index := j + gap - <span class="number">2</span>*i</span><br><span class="line">            <span class="keyword">if</span> i != <span class="number">0</span> &amp;&amp; i != numRows<span class="number">-1</span> &amp;&amp; index &lt; <span class="built_in">len</span>(s) &#123;</span><br><span class="line">                result += <span class="keyword">string</span>(s[index])</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Longest Palindromic Substring</title>
      <link href="/2017/01/03/leetecode/Longest-Palindromic-Substring/"/>
      <url>/2017/01/03/leetecode/Longest-Palindromic-Substring/</url>
      
        <content type="html"><![CDATA[<h1 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h1><p>给定一个字符串，要你求出这个字符串的最长回文串。<br>例如字符串”babad”,最长回文子串为”bab”或者”aba”。<br><a id="more"></a></p><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><p>最简单的方法，对于长度为奇数的回文串，我们以中轴往左右扩展i。对于长度为偶数的回文串，我们首先要判断中间2个字符是否相等，<br>若相等，则继续往左右两端进行扩展。这种方法的复杂度为O(n^2)。可以用另外一种方法，复杂度为O(n)。<br>上述的方法，由于有奇数长度的回文串和偶数长度的回文串的情况，所以每扫描到一个字符就要按这2种情况进行判断。<br>我们可以在字符串中间插入不会出现的字符，将其转化为一个奇数长度的回文串，待求出后再将这些多余的字符去掉。<br>例如字符串”babad”可以转化为”#b#a#b#a#d#”,这样子串的回文性也没有被破坏。<br>而且每次扩展新的回文串时，我们可以利用已经扫描过的回文信息。<br>利用数组handle来记录从当前这个位置到达最远的回文串的半径。例如字符串”#b#a#b#a#d#”, handle[3]=4。<br>用mx来记录当前回文串能延伸的最右边的位置。<br>如下图所示：<br><img src="/images/leetecode/Longest-Palindromic-Substring.png" alt="Longest Palindromic Substring"></p><p>如上图(a)所示，mx是当前所求到的回文串能延伸到最右边的位置。p是mx对应的中轴。<br>假如当前扫描到i位置，i在p的回文半径之内。可以利用已求出的各个位置的回文半径来求i的回文半径。<br>i关于p的对称点为j。若j的回文半径小于等于p的回文半径，由于被p的回文半径覆盖，根据对称性，<br>i位置左右两边handle[j]长度必然对称。所以求i的回文半径，可以在handle[j]的长度上也即使handle[i]=handle[j],<br>再在这个长度上往左右两边继续扩展直到碰到不相等的字符为止，最后得到handle[i]。<br>若j位置的回文半径向左超出了p的回文半径，如上图(b)所示，那么由于超出的部分不在p回文半径涵盖的范围内，没有对称性。<br>所以求handle[i]时，只能在mx - i的长度下继续向左右两边扩展。<br>若i不在p的回文半径之内，那么只有从左右两边一个个的比较来求得handel[i]。<br>为了让字符串左右扫描能够结束，处理过的字符串前面再加上一个不可能出现的字符”$”。  </p><p>在求完handle数组后，扫描这个数组，得到最大的回文半径max_length和与之对应的中轴位置max_index。<br>中轴对应的位置可能是原字符也有可能是”#”字符。若是原字符，说明回文串是个奇数长度。若是”#”字符，<br>说明回文串是个偶数长度。<br>max_index - max_length是以max_index为中轴向左延伸的位置，且这个位置字符必然为”#”。由于处理后的字符串<br>每个字符前面都有一个”#”字符，并且第0个字符是”$”，”$”可以与max_index - max_length对应的字符”#”对应。<br>所以这个回文串在原来的字符串的起始位置为(max_index - max_length) / 2，长度为max_length。</p><h1 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h1><h2 id="C-实现"><a href="#C-实现" class="headerlink" title="C++实现"></a>C++实现</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">longestPalindrome</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">         <span class="keyword">if</span>(s.size() &lt;= <span class="number">1</span>) <span class="keyword">return</span> s;</span><br><span class="line">            <span class="function"><span class="built_in">string</span> <span class="title">ss</span><span class="params">(<span class="string">"$"</span>)</span></span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="built_in">string</span>::iterator it = s.begin(); it != s.end(); it++) &#123;</span><br><span class="line">                ss += <span class="string">"#"</span>;</span><br><span class="line">                ss += *it;</span><br><span class="line">            &#125;</span><br><span class="line">            ss += <span class="string">"#"</span>;</span><br><span class="line">            <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; handle(ss.size(), <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">int</span> p = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">int</span> mx = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; ss.size(); i++) &#123;</span><br><span class="line">                <span class="keyword">int</span> j = <span class="number">2</span> * p - i;</span><br><span class="line">                <span class="keyword">if</span>(i &lt; mx) &#123;</span><br><span class="line">                    <span class="keyword">if</span>(mx - i &gt; handle[j]) handle[i] = handle[j];</span><br><span class="line">                    <span class="keyword">else</span> handle[i] = mx - i;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">while</span>(ss[i + handle[i] + <span class="number">1</span>] == ss[i - handle[i] - <span class="number">1</span>]) handle[i]++;</span><br><span class="line">                <span class="keyword">if</span>(mx &lt; i + handle[i]) &#123;</span><br><span class="line">                    mx = i + handle[i];</span><br><span class="line">                    p = i;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">int</span> length = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; handle.size(); i++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(length &lt; handle[i]) &#123;</span><br><span class="line">                    index = i;</span><br><span class="line">                    length = handle[i];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span> start_index = (index - length) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">return</span> s.substr(start_index, length);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="Go实现"><a href="#Go实现" class="headerlink" title="Go实现"></a>Go实现</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"bytes"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">longestPalindrome</span><span class="params">(s <span class="keyword">string</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line">       <span class="keyword">if</span> <span class="built_in">len</span>(s) == <span class="number">1</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> s</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    assist_str := <span class="string">"$"</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(s); i++ &#123;</span><br><span class="line">        assist_str += <span class="string">"#"</span></span><br><span class="line">        assist_str += <span class="keyword">string</span>(s[i])</span><br><span class="line">    &#125;</span><br><span class="line">    assist_str += <span class="string">"#"</span></span><br><span class="line"></span><br><span class="line">    handle := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="built_in">len</span>(assist_str), <span class="built_in">len</span>(assist_str))</span><br><span class="line">    handle[<span class="number">0</span>] = <span class="number">0</span></span><br><span class="line">    mx := <span class="number">0</span></span><br><span class="line">    id := <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">1</span>; i &lt; <span class="built_in">len</span>(assist_str); i++ &#123;</span><br><span class="line">        <span class="keyword">if</span> mx &lt;= i &#123;</span><br><span class="line">            handle[i] = <span class="number">0</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            j := <span class="number">2</span>*id - i</span><br><span class="line">            <span class="keyword">if</span> mx-i &gt; handle[j] &#123;</span><br><span class="line">                handle[i] = handle[j]</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                handle[i] = mx - i</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> i+handle[i]+<span class="number">1</span> &lt; <span class="built_in">len</span>(assist_str) &amp;&amp; i-handle[i]<span class="number">-1</span> &gt;= <span class="number">0</span> &amp;&amp; assist_str[i+handle[i]+<span class="number">1</span>] == assist_str[i-handle[i]<span class="number">-1</span>] &#123;</span><br><span class="line">            handle[i] += <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> mx &lt; i+handle[i] &#123;</span><br><span class="line">            id = i</span><br><span class="line">            mx = i + handle[i]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    mx_index := <span class="number">0</span></span><br><span class="line">    mx_handle := <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(handle); i++ &#123;</span><br><span class="line">        <span class="keyword">if</span> handle[i] &gt; mx_handle &#123;</span><br><span class="line">            mx_index = i</span><br><span class="line">            mx_handle = handle[i]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    start_index := (mx_index - mx_handle) / <span class="number">2</span></span><br><span class="line">    <span class="keyword">return</span> s[start_index:start_index + mx_handle]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Median of Two Sorted Arrays</title>
      <link href="/2016/10/24/leetecode/Median-of-Two-Sorted-Arrays/"/>
      <url>/2016/10/24/leetecode/Median-of-Two-Sorted-Arrays/</url>
      
        <content type="html"><![CDATA[<h1 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h1><p>题目可以转换为2个数组长度和为k,当这个k为奇数时，求第k/2小的数（从0开始数）。<br>若k为偶数，求出第k/2 - 1小的数和第k/2小的数的平均值。</p><p>给定两个从小到大排序好的整数数组。要求你求出这两个数的中位数。<br>例如：<br>nums1 = [1, 3]<br>nums2 = [2]<br>它们的中位数为2.0</p><p>nums1 = [1, 2]<br>nums2 = [3, 4]<br>它们的中位数为(2 + 3)/2 = 2.5<br><a id="more"></a></p><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><p>最简单的方式是用归并排序将2个有序数组合并成一个有序数据，然后就可以求出这两个数组的中位数。算法复杂度为O(n)。<br>我们还有另一种方法求解，2个数组都是有序的，可以利用折半查找的方式来求这两个数组的中位数，也即转而求这两个数组<br>第k小的数，即能求出中位数。算法复杂度为O(log(n))。<br>假设有两个排序好的数组nums1和nums2,分别如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nums1[0], nums1[1], ... , nums1[m/2], nums1[m/2 + 1], ... , nums1[m - 1]  </span><br><span class="line">nums2[0], nums2[1], ... , nums2[n/2], nums2[n/2 + 1], ... , nums2[n - 1]</span><br></pre></td></tr></table></figure></p><ol><li>若nums1[m/2] &gt;= nums2[n/2], 并且nums1数组[0, m/2 - 1]范围的整数个数与nums2数组[0, n/2]范围的整数个数的总和大于等于k时。<br>由于nums1[m/2] &gt;= nums2[n/2]，所以nums1数组[m/2, m-1]这个范围的数，必然会比nums1数组[0, m/2 - 1]和nums2数组[0, n/2]范围的数大。<br>又由于nums1数组[0, m/2 - 1]范围的整数个数与nums2数组[0, n/2]范围的整数个数的总和大于等于k，所以第k小的数不可能会出现在nums1数组的[m/2, m -1]这个范围内，所以将[m/2, m -1]丢弃。  </li><li>若nums2[n/2] &gt;= nums1[m/2], 并且nums1数组[0, m/2]与nums2数组[0, n/2 - 1]包含的整数个数大于等于k时，分析方法和上述1类似，丢弃[n/2, n - 1]。  </li><li>若nums1[m/2] &gt;= nums2[n/2]，并且nums1数组[0, m/2 - 1]与nums2数组[0, n/2]范围的整数个数和小于k时。<br>由于nums2数组[0, n/2]范围的数小于nums1数组[m/2, m-1]和nums2数组[n/2 + 1, n - 1]这两个范围的数，<br>所以第k小的数不可能出现在nums2数组[0, n/2]范围内，所以抛弃[0, n/2]，转而求第k - (n/2 + 1)小的数。    </li><li>若nums2[n/2] &gt;= nums1[m/2], 并且nums1数组[0, m/2]与nums2数组[0, n/2 - 1]包含的整数个数小于k时。<br>方法与上述3类似，丢弃[0, m/2], 转而求第k - (m/2 + 1)小的数。  </li></ol><p>在剩余的数组中反复用上述的4个方法进行淘汰，知道其中一个数组被淘汰光，或者最后只剩下求第1小的数为止。</p><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><h2 id="C-实现"><a href="#C-实现" class="headerlink" title="C++实现"></a>C++实现</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="function"><span class="keyword">double</span> <span class="title">findMedianSortedArrays</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums1, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums2)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> total_len = nums1.size() + nums2.size();</span><br><span class="line">            <span class="keyword">if</span>((total_len &amp; <span class="number">1</span>) == <span class="number">1</span>) <span class="keyword">return</span> findTheKthMin(nums1, nums2, total_len / <span class="number">2</span> + <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">return</span> (findTheKthMin(nums1, nums2, total_len / <span class="number">2</span>) + findTheKthMin(nums1, nums2, total_len / <span class="number">2</span> + <span class="number">1</span>)) / <span class="number">2.0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        <span class="function"><span class="keyword">double</span> <span class="title">findTheKthMin</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums1, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums2, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> high1 = nums1.size() - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">int</span> low1 = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">int</span> high2 = nums2.size() - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">int</span> low2 = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">int</span> mid1 = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">int</span> mid2 = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span>(low1 &lt;= high1 &amp;&amp; low2 &lt;= high2 &amp;&amp; k &gt; <span class="number">1</span>) &#123;</span><br><span class="line">                mid1 = (high1 + low1) / <span class="number">2</span>;</span><br><span class="line">                mid2 = (high2 + low2) / <span class="number">2</span>;</span><br><span class="line">                <span class="keyword">if</span>(mid1 - low1 + mid2 - low2 + <span class="number">1</span> &gt;= k) &#123;</span><br><span class="line">                    <span class="keyword">if</span>(nums1[mid1] &gt;= nums2[mid2]) &#123;</span><br><span class="line">                        high1 = mid1 - <span class="number">1</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        high2 = mid2 - <span class="number">1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span>(nums1[mid1] &gt;= nums2[mid2]) &#123;</span><br><span class="line">                        k -= (mid2 - low2 + <span class="number">1</span>);</span><br><span class="line">                        low2 = mid2 + <span class="number">1</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        k -= (mid1 - low1 + <span class="number">1</span>);</span><br><span class="line">                        low1 = mid1 + <span class="number">1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(low1 &gt; high1) <span class="keyword">return</span> nums2[low2 + k - <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(low2 &gt; high2) <span class="keyword">return</span> nums1[low1 + k - <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">return</span> min(nums1[low1], nums2[low2]);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="Go实现"><a href="#Go实现" class="headerlink" title="Go实现"></a>Go实现</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">findKthSortedArrays</span><span class="params">(nums1 []<span class="keyword">int</span>, nums2 []<span class="keyword">int</span>, k <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    low_1 := <span class="number">0</span></span><br><span class="line">    high_1 := <span class="built_in">len</span>(nums1) - <span class="number">1</span></span><br><span class="line">    low_2 := <span class="number">0</span></span><br><span class="line">    high_2 := <span class="built_in">len</span>(nums2) - <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> low_1 &lt;= high_1 &amp;&amp; low_2 &lt;= high_2 &amp;&amp; k &gt; <span class="number">1</span> &#123;</span><br><span class="line">        mid_1 := (high_1 + low_1) / <span class="number">2</span></span><br><span class="line">        mid_2 := (high_2 + low_2) / <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> mid_1 - low_1 + mid_2 - low_2 + <span class="number">1</span> &gt;= k &#123;</span><br><span class="line">            <span class="keyword">if</span> nums1[mid_1] &gt;= nums2[mid_2] &#123;</span><br><span class="line">                high_1 = mid_1 - <span class="number">1</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                high_2 = mid_2 - <span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> nums1[mid_1] &gt;= nums2[mid_2] &#123;</span><br><span class="line">                k -= (mid_2 - low_2 + <span class="number">1</span>)</span><br><span class="line">                low_2 = mid_2 + <span class="number">1</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                k -= (mid_1 - low_1 + <span class="number">1</span>)</span><br><span class="line">                low_1 = mid_1 + <span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> low_1 &gt; high_1 &#123;</span><br><span class="line">        <span class="keyword">return</span> nums2[low_2 + k - <span class="number">1</span>]</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> low_2 &gt; high_2 &#123;</span><br><span class="line">        <span class="keyword">return</span> nums1[low_1 + k - <span class="number">1</span>]</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> nums1[low_1] &lt;= nums2[low_2] &#123;</span><br><span class="line">            <span class="keyword">return</span> nums1[low_1]</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> nums2[low_2]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">findMedianSortedArrays</span><span class="params">(nums1 []<span class="keyword">int</span>, nums2 []<span class="keyword">int</span>)</span> <span class="title">float64</span></span> &#123;</span><br><span class="line">    total_len := <span class="built_in">len</span>(nums1) + <span class="built_in">len</span>(nums2)</span><br><span class="line">    <span class="keyword">if</span> (total_len &amp; <span class="number">1</span>) == <span class="number">1</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">float64</span>(findKthSortedArrays(nums1, nums2, total_len / <span class="number">2</span> + <span class="number">1</span>))</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">float64</span>(findKthSortedArrays(nums1, nums2, total_len/<span class="number">2</span>)) + <span class="keyword">float64</span>(findKthSortedArrays(nums1, nums2, total_len/<span class="number">2</span>+<span class="number">1</span>))) / <span class="number">2.0</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Longest Substring Without Repeating Characters</title>
      <link href="/2016/10/23/leetecode/Longest-Substring-Without-Repeating-Characters/"/>
      <url>/2016/10/23/leetecode/Longest-Substring-Without-Repeating-Characters/</url>
      
        <content type="html"><![CDATA[<h1 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h1><p>给定一个字符串，要你在这个字符串中求出最长的且里面没有重复的字符的子串。<br>例如：<br>字符串”abcabcbb”的不重复子串为”abc”。<br>字符串”bbbbb”的不重复子串为”b”。<br>字符串”pwwkew”的不重复子串为”wke”。<br><a id="more"></a></p><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><p>从头到尾遍历字符串，同时在遍历的过程中，用一个hash table来保存当前字符串的位置。<br>那么当扫描到的字符在hash table中存在，hash table对应的值就是最近出现的相同字符。<br>算出这个区间的子字符串的长度，保留符合条件的最长子字符串。</p><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><h2 id="C-实现"><a href="#C-实现" class="headerlink" title="C++实现"></a>C++实现</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line"><span class="built_in">unordered_map</span>&lt;<span class="keyword">char</span>, <span class="keyword">int</span>&gt; hash_table;</span><br><span class="line"><span class="keyword">int</span> max_len = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> pre_index = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">string</span>::iterator it = s.begin(); it != s.end(); it++) &#123;</span><br><span class="line"><span class="keyword">if</span>(hash_table.find(*it) != hash_table.end() &amp;&amp; pre_index &lt; hash_table[*it] + <span class="number">1</span>) &#123;</span><br><span class="line">pre_index = hash_table[*it] + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">hash_table[*it] = index;</span><br><span class="line">max_len = max(max_len, index - pre_index + <span class="number">1</span>);</span><br><span class="line">index += <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> max_len;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Solution s;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; s.lengthOfLongestSubstring(<span class="string">"abba"</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Go实现"><a href="#Go实现" class="headerlink" title="Go实现"></a>Go实现</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Max</span><span class="params">(x, y <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> x &gt; y &#123;</span><br><span class="line"><span class="keyword">return</span> x</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> y</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(s <span class="keyword">string</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">hash_table := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">rune</span>]<span class="keyword">int</span>)</span><br><span class="line">pre_index := <span class="number">0</span></span><br><span class="line">max_len := <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i, c_str := <span class="keyword">range</span> s &#123;</span><br><span class="line">_, ok := hash_table[c_str]</span><br><span class="line"><span class="keyword">if</span> ok &amp;&amp; pre_index &lt; hash_table[c_str]+<span class="number">1</span> &#123;</span><br><span class="line">pre_index = hash_table[c_str] + <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line">hash_table[c_str] = i</span><br><span class="line">max_len = Max(max_len, (i - pre_index + <span class="number">1</span>))</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> max_len</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Add Two Numbers</title>
      <link href="/2016/10/23/leetecode/Add-Two-Numbers/"/>
      <url>/2016/10/23/leetecode/Add-Two-Numbers/</url>
      
        <content type="html"><![CDATA[<h1 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h1><p>给定2个链表，链表中每个元素表示一个个位数，要求讲两个链表相加，<br>最后得到它们的结果<br><a id="more"></a></p><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><p>简单的进位相加。两个指针分别指向这两个链表，相加后若大于等于10，表示有进位，<br>保留，然后加到后面两个整数和中。</p><h1 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h1><h2 id="C-实现"><a href="#C-实现" class="headerlink" title="C++实现"></a>C++实现</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> val;</span><br><span class="line">ListNode *next;</span><br><span class="line">ListNode(<span class="keyword">int</span> x): val(x), next(<span class="literal">NULL</span>) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function">ListNode *<span class="title">addTwoNumbers</span><span class="params">(ListNode* l1, ListNode* l2)</span> </span>&#123;</span><br><span class="line">ListNode *head = <span class="literal">NULL</span>;</span><br><span class="line">ListNode *pre = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">int</span> acc = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(l1 != <span class="literal">NULL</span> &amp;&amp; l2 != <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="keyword">int</span> temp = l1-&gt;val + l2-&gt;val + acc;</span><br><span class="line">ListNode *cur = <span class="keyword">new</span> ListNode(temp % <span class="number">10</span>);</span><br><span class="line">acc = temp / <span class="number">10</span>;</span><br><span class="line"><span class="keyword">if</span>(head == <span class="literal">NULL</span>) head = cur;</span><br><span class="line"><span class="keyword">if</span>(pre != <span class="literal">NULL</span>) pre-&gt;next = cur; </span><br><span class="line">pre = cur;</span><br><span class="line">l1 = l1-&gt;next;</span><br><span class="line">l2 = l2-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(l1 != <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="keyword">int</span> temp = l1-&gt;val + acc;</span><br><span class="line">ListNode *cur = <span class="keyword">new</span> ListNode(temp % <span class="number">10</span>);</span><br><span class="line">acc = temp / <span class="number">10</span>;</span><br><span class="line"><span class="keyword">if</span>(head == <span class="literal">NULL</span>) head = cur;</span><br><span class="line"><span class="keyword">if</span>(pre != <span class="literal">NULL</span>) pre-&gt;next = cur;</span><br><span class="line">pre = cur;</span><br><span class="line">l1 = l1-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(l2 != <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="keyword">int</span> temp = l2-&gt;val + acc;</span><br><span class="line">ListNode *cur = <span class="keyword">new</span> ListNode(temp % <span class="number">10</span>);</span><br><span class="line">acc = temp / <span class="number">10</span>;</span><br><span class="line"><span class="keyword">if</span>(head == <span class="literal">NULL</span>) head = cur;</span><br><span class="line"><span class="keyword">if</span>(pre != <span class="literal">NULL</span>) pre-&gt;next = cur;</span><br><span class="line">pre = cur;</span><br><span class="line">l2 = l2-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(acc &gt; <span class="number">0</span>) &#123;</span><br><span class="line">ListNode *cur = <span class="keyword">new</span> ListNode(acc);</span><br><span class="line"><span class="keyword">if</span>(head == <span class="literal">NULL</span>) head = cur;</span><br><span class="line"><span class="keyword">if</span>(pre != <span class="literal">NULL</span>) pre-&gt;next = cur;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="Go实现"><a href="#Go实现" class="headerlink" title="Go实现"></a>Go实现</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> ListNode <span class="keyword">struct</span> &#123;</span><br><span class="line">Val  <span class="keyword">int</span></span><br><span class="line">Next *ListNode</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">addTwoNumbers</span><span class="params">(l1 *ListNode, l2 *ListNode)</span> *<span class="title">ListNode</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> head *ListNode = <span class="literal">nil</span></span><br><span class="line"><span class="keyword">var</span> pre *ListNode = <span class="literal">nil</span></span><br><span class="line">acc := <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> l1 != <span class="literal">nil</span> &amp;&amp; l2 != <span class="literal">nil</span> &#123;</span><br><span class="line">temp := l1.Val + l2.Val + acc</span><br><span class="line">cur := &amp;ListNode&#123;temp % <span class="number">10</span>, <span class="literal">nil</span>&#125;</span><br><span class="line"><span class="keyword">if</span> head == <span class="literal">nil</span> &#123;</span><br><span class="line">head = cur</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> pre != <span class="literal">nil</span> &#123;</span><br><span class="line">pre.Next = cur</span><br><span class="line">&#125;</span><br><span class="line">acc = temp / <span class="number">10</span></span><br><span class="line">pre = cur</span><br><span class="line">l2 = l2.Next</span><br><span class="line">l1 = l1.Next</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> l1 != <span class="literal">nil</span> &#123;</span><br><span class="line">temp := l1.Val + acc</span><br><span class="line">cur := &amp;ListNode&#123;temp % <span class="number">10</span>, <span class="literal">nil</span>&#125;</span><br><span class="line"><span class="keyword">if</span> head == <span class="literal">nil</span> &#123;</span><br><span class="line">head = cur</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> pre != <span class="literal">nil</span> &#123;</span><br><span class="line">pre.Next = cur</span><br><span class="line">&#125;</span><br><span class="line">acc = temp / <span class="number">10</span></span><br><span class="line">pre = cur</span><br><span class="line">l1 = l1.Next</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> l2 != <span class="literal">nil</span> &#123;</span><br><span class="line">temp := l2.Val + acc</span><br><span class="line">cur := &amp;ListNode&#123;temp % <span class="number">10</span>, <span class="literal">nil</span>&#125;</span><br><span class="line"><span class="keyword">if</span> head == <span class="literal">nil</span> &#123;</span><br><span class="line">head = cur</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> pre != <span class="literal">nil</span> &#123;</span><br><span class="line">pre.Next = cur</span><br><span class="line">&#125;</span><br><span class="line">acc = temp / <span class="number">10</span></span><br><span class="line">pre = cur</span><br><span class="line">l2 = l2.Next</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> acc &gt; <span class="number">0</span> &#123;</span><br><span class="line">cur := &amp;ListNode&#123;acc, <span class="literal">nil</span>&#125;</span><br><span class="line"><span class="keyword">if</span> head == <span class="literal">nil</span> &#123;</span><br><span class="line">head = cur</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> pre != <span class="literal">nil</span> &#123;</span><br><span class="line">pre.Next = cur</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> head</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Two Sum</title>
      <link href="/2016/10/23/leetecode/Two-Sum/"/>
      <url>/2016/10/23/leetecode/Two-Sum/</url>
      
        <content type="html"><![CDATA[<h1 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h1><p>给定一个整数数组，比如nums = [2, 7, 11, 15]，和一个目标数，比如9。<br>要求你在这个数组中找到两个数，这两个数的和正好等于目标数，并且把这两个数的数组位置输出。<br>假设这个数组里面一定存在和等于目标数的两个数，并且这样的组合只存在唯一一个。<br><a id="more"></a></p><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><p>用一个结构来记录这个数组的值和位置组成一个新的数组。然后对这个数组进行重小到大的排序。<br>然后用两个指针a,b分别指向这个排序好的数组的首尾。若当前指向的两个数的和小于目标数，则<br>首指针a后移。若当前指向的两个数的和大于目标数，则尾指针b前移。若相等则输出这两个数在原<br>数组的位置。</p><h1 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h1><h2 id="C-实现"><a href="#C-实现" class="headerlink" title="C++实现"></a>C++实现</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> index;</span><br><span class="line"><span class="keyword">int</span> val;</span><br><span class="line">Node(<span class="keyword">int</span> index, <span class="keyword">int</span> v): index(index), val(v) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">compare</span><span class="params">(<span class="keyword">const</span> Node &amp;node1, <span class="keyword">const</span> Node &amp;node2)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> node1.val &lt; node2.val;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; twoSum(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;Node&gt; v;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.size(); i++) &#123;</span><br><span class="line">v.push_back(Node(i, nums[i]));</span><br><span class="line">&#125;</span><br><span class="line">sort(v.begin(), v.end(), compare);</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; result(<span class="number">2</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>, j = v.size() - <span class="number">1</span>; i &lt; j;) &#123;</span><br><span class="line"><span class="keyword">if</span>(v[i].val + v[j].val == target) &#123;</span><br><span class="line">result[<span class="number">0</span>] = v[i].index;</span><br><span class="line">result[<span class="number">1</span>] = v[j].index;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(v[i].val + v[j].val &gt; target) &#123;</span><br><span class="line">j--;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="Go实现"><a href="#Go实现" class="headerlink" title="Go实现"></a>Go实现</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"sort"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Node <span class="keyword">struct</span> &#123;</span><br><span class="line">index, val <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> ByVal []Node</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a ByVal)</span> <span class="title">Len</span><span class="params">()</span> <span class="title">int</span></span>           &#123; <span class="keyword">return</span> <span class="built_in">len</span>(a) &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a ByVal)</span> <span class="title">Swap</span><span class="params">(i, j <span class="keyword">int</span>)</span></span>      &#123; a[i], a[j] = a[j], a[i] &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a ByVal)</span> <span class="title">Less</span><span class="params">(i, j <span class="keyword">int</span>)</span> <span class="title">bool</span></span> &#123; <span class="keyword">return</span> a[i].val &lt; a[j].val &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">twoSum</span><span class="params">(nums []<span class="keyword">int</span>, target <span class="keyword">int</span>)</span> []<span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> nodes []Node</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(nums); i++ &#123;</span><br><span class="line">nodes = <span class="built_in">append</span>(nodes, Node&#123;i, nums[i]&#125;)</span><br><span class="line">&#125;</span><br><span class="line">sort.Sort(ByVal(nodes))</span><br><span class="line">results := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">2</span>)</span><br><span class="line"><span class="keyword">for</span> i, j := <span class="number">0</span>, <span class="built_in">len</span>(nodes)<span class="number">-1</span>; i &lt; j; &#123;</span><br><span class="line">temp := nodes[i].val + nodes[j].val</span><br><span class="line"><span class="keyword">if</span> temp == target &#123;</span><br><span class="line">results[<span class="number">0</span>] = nodes[i].index</span><br><span class="line">results[<span class="number">1</span>] = nodes[j].index</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> temp &gt; target &#123;</span><br><span class="line">j--</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">i++</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> results</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
